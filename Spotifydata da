#In this project, I analyze data regarding spotify downloaded from Kaggle
#Then create the table to insert downloaded spotify data csv into data set
#And then I analyze the data

#We start by creating the table itself
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Next we get an overview of the data to determine questions we may have and queries to solve for answers
SELECT *
FROM BIT_DB.Spotifydata
;

#See which tracks have the highest popularity score
SELECT artist_name, track_name, popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity DESC
LIMIT 10;

#Find artists whose music is the most danceable and energetic on average.
SELECT artist_name,
    AVG(danceability) AS avg_danceability,
    AVG(energy) AS avg_energy
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY avg_danceability DESC
LIMIT 10;

#Discover the most frequently used musical key and mode (major/minor)
SELECT song_key, song_mode, COUNT(*) AS count
FROM BIT_DB.Spotifydata
GROUP BY song_key, song_mode
ORDER BY count DESC
LIMIT 5;

#Analyze how acousticness changes with popularity bands (0–10, 10–20, etc.).
SELECT ROUND(popularity / 10.0) * 10 AS popularity_group,
    AVG(acousticness) AS avg_acousticness
FROM BIT_DB.Spotifydata
GROUP BY popularity_group
ORDER BY popularity_group;

#Identify the longest tracks in the dataset.
SELECT artist_name, track_name, duration_ms
FROM BIT_DB.Spotifydata
ORDER BY duration_ms DESC
LIMIT 10;
